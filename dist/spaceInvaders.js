/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./examples/space-invaders/spaceInvaders.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./examples/space-invaders/spaceInvaders.ts":
/*!**************************************************!*\
  !*** ./examples/space-invaders/spaceInvaders.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(__webpack_require__(/*! ../../src/index */ "./src/index.ts"));
const physics_1 = __importDefault(__webpack_require__(/*! ../../physics */ "./physics/index.ts"));
const render_1 = __importDefault(__webpack_require__(/*! ../../render */ "./render/index.ts"));
const gameConfig = {
    width: 800,
    height: 600,
};
// Add renderer
const renderer = render_1.default.createRenderer(gameConfig);
document.body.appendChild(renderer.view);
const game = index_1.default({
    targetGameLogicFrameRate: 60,
    update,
    render,
});
// Create Player
const player = physics_1.default.Bodies.circle(400, 200, 25);
// Create invaders
const invaders = [];
for (let i = 0; i < 5; i++) {
    invaders.push(physics_1.default.Bodies.circle((gameConfig.width * 0.2 * (i + .5)), gameConfig.height * 0.10, 15));
}
const world = [
    ...invaders,
    player,
];
game.start();
function start() {
}
function update() {
    physics_1.default.nextTick(world);
}
function render(distanceBetweenGameLogicFrames) {
    renderer.nextTick(world);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhY2VJbnZhZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2V4YW1wbGVzL3NwYWNlLWludmFkZXJzL3NwYWNlSW52YWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0REFBeUM7QUFDekMsNERBQW9DO0FBQ3BDLDBEQUFvQztBQUVwQyxNQUFNLFVBQVUsR0FBRztJQUNmLEtBQUssRUFBRSxHQUFHO0lBQ1YsTUFBTSxFQUFFLEdBQUc7Q0FDZCxDQUFDO0FBRUYsZUFBZTtBQUNmLE1BQU0sUUFBUSxHQUFHLGdCQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QyxNQUFNLElBQUksR0FBRyxlQUFVLENBQUM7SUFDcEIsd0JBQXdCLEVBQUUsRUFBRTtJQUM1QixNQUFNO0lBQ04sTUFBTTtDQUNULENBQUMsQ0FBQztBQUlILGdCQUFnQjtBQUNoQixNQUFNLE1BQU0sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVuRCxrQkFBa0I7QUFDbEIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDeEIsUUFBUSxDQUFDLElBQUksQ0FDVCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQ2pCLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDbkMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQ3hCLEVBQUUsQ0FDTCxDQUNKLENBQUE7Q0FDSjtBQUVELE1BQU0sS0FBSyxHQUFHO0lBQ1YsR0FBRyxRQUFRO0lBQ1gsTUFBTTtDQUNULENBQUM7QUFFRixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFHYixTQUFTLEtBQUs7QUFFZCxDQUFDO0FBQ0QsU0FBUyxNQUFNO0lBQ1gsaUJBQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLDhCQUFzQztJQUNsRCxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlR2FtZSBmcm9tICcuLi8uLi9zcmMvaW5kZXgnO1xuaW1wb3J0IFBoeXNpY3MgZnJvbSAnLi4vLi4vcGh5c2ljcyc7XG5pbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi4vLi4vcmVuZGVyJztcblxuY29uc3QgZ2FtZUNvbmZpZyA9IHtcbiAgICB3aWR0aDogODAwLFxuICAgIGhlaWdodDogNjAwLFxufTtcblxuLy8gQWRkIHJlbmRlcmVyXG5jb25zdCByZW5kZXJlciA9IFJlbmRlcmVyLmNyZWF0ZVJlbmRlcmVyKGdhbWVDb25maWcpO1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci52aWV3KTtcblxuY29uc3QgZ2FtZSA9IGNyZWF0ZUdhbWUoe1xuICAgIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZTogNjAsXG4gICAgdXBkYXRlLFxuICAgIHJlbmRlcixcbn0pO1xuXG5cblxuLy8gQ3JlYXRlIFBsYXllclxuY29uc3QgcGxheWVyID0gUGh5c2ljcy5Cb2RpZXMuY2lyY2xlKDQwMCwgMjAwLCAyNSk7XG5cbi8vIENyZWF0ZSBpbnZhZGVyc1xuY29uc3QgaW52YWRlcnMgPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgaW52YWRlcnMucHVzaChcbiAgICAgICAgUGh5c2ljcy5Cb2RpZXMuY2lyY2xlKFxuICAgICAgICAgICAgKGdhbWVDb25maWcud2lkdGggKiAwLjIgKiAoaSArIC41KSksXG4gICAgICAgICAgICBnYW1lQ29uZmlnLmhlaWdodCAqIDAuMTAsXG4gICAgICAgICAgICAxNVxuICAgICAgICApXG4gICAgKVxufVxuXG5jb25zdCB3b3JsZCA9IFtcbiAgICAuLi5pbnZhZGVycyxcbiAgICBwbGF5ZXIsXG5dO1xuXG5nYW1lLnN0YXJ0KCk7XG5cblxuZnVuY3Rpb24gc3RhcnQoKSB7XG5cbn1cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBQaHlzaWNzLm5leHRUaWNrKHdvcmxkKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyKGRpc3RhbmNlQmV0d2VlbkdhbWVMb2dpY0ZyYW1lczogbnVtYmVyKSB7XG4gICAgcmVuZGVyZXIubmV4dFRpY2sod29ybGQpO1xufVxuIl19

/***/ }),

/***/ "./physics/Bodies.ts":
/*!***************************!*\
  !*** ./physics/Bodies.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    circle,
};
/**
* Creates a new rigid body model with a circle hull.
* The options parameter is an object that specifies any properties you wish to override the defaults.
* See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
* @method circle
* @param {number} x
* @param {number} y
* @param {number} radius
* @return {body} A new circle body
*/
function circle(x, y, radius) {
    return {
        x,
        y,
        radius,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9kaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vcGh5c2ljcy9Cb2RpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQkFBZTtJQUNYLE1BQU07Q0FDVCxDQUFDO0FBRUQ7Ozs7Ozs7OztFQVNFO0FBQ0gsU0FBUyxNQUFNLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjO0lBQ2hELE9BQU87UUFDSCxDQUFDO1FBQ0QsQ0FBQztRQUNELE1BQU07S0FDVCxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb2R5IGZyb20gJy4vQm9keSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjaXJjbGUsXG59O1xuXG4gLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHJpZ2lkIGJvZHkgbW9kZWwgd2l0aCBhIGNpcmNsZSBodWxsLlxuICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAqIEBtZXRob2QgY2lyY2xlXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IHlcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAqIEByZXR1cm4ge2JvZHl9IEEgbmV3IGNpcmNsZSBib2R5XG4gKi9cbmZ1bmN0aW9uIGNpcmNsZSh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIpOiBCb2R5IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICByYWRpdXMsXG4gICAgfTtcbn1cbiJdfQ==

/***/ }),

/***/ "./physics/index.ts":
/*!**************************!*\
  !*** ./physics/index.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bodies_1 = __importDefault(__webpack_require__(/*! ./Bodies */ "./physics/Bodies.ts"));
exports.default = {
    Bodies: Bodies_1.default,
    nextTick,
};
function nextTick(bodies) {
    for (const body of bodies) {
        // Update position
        const velocity = {
            x: 0,
            y: 0,
            ...body.velocity,
        };
        body.x += velocity.x;
        body.y += velocity.y;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9waHlzaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQThCO0FBRzlCLGtCQUFlO0lBQ1gsTUFBTSxFQUFOLGdCQUFNO0lBQ04sUUFBUTtDQUNYLENBQUM7QUFHRixTQUFTLFFBQVEsQ0FBQyxNQUFjO0lBQzVCLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1FBQ3ZCLGtCQUFrQjtRQUNsQixNQUFNLFFBQVEsR0FBRztZQUNiLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixHQUFHLElBQUksQ0FBQyxRQUFRO1NBQ25CLENBQUE7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb2RpZXMgZnJvbSAnLi9Cb2RpZXMnO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9Cb2R5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEJvZGllcyxcbiAgICBuZXh0VGljayxcbn07XG5cblxuZnVuY3Rpb24gbmV4dFRpY2soYm9kaWVzOiBCb2R5W10pIHtcbiAgICBmb3IgKGNvbnN0IGJvZHkgb2YgYm9kaWVzKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBwb3NpdGlvblxuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgLi4uYm9keS52ZWxvY2l0eSxcbiAgICAgICAgfVxuICAgICAgICBib2R5LnggKz0gdmVsb2NpdHkueDtcbiAgICAgICAgYm9keS55ICs9IHZlbG9jaXR5Lnk7XG4gICAgfVxufVxuIl19

/***/ }),

/***/ "./render/index.ts":
/*!*************************!*\
  !*** ./render/index.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    createRenderer,
};
function createRenderer(config) {
    const canvas = Object.assign(document.createElement('canvas'), config);
    const context = canvas.getContext('2d');
    return {
        view: canvas,
        nextTick,
    };
    function nextTick(bodies) {
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        for (const body of bodies) {
            context.beginPath();
            context.arc(body.x, body.y, body.radius, 0, 2 * Math.PI);
            context.lineWidth = 1;
            context.strokeStyle = '#999';
            context.stroke();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9yZW5kZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQkFBZTtJQUNYLGNBQWM7Q0FDakIsQ0FBQztBQUVGLFNBQVMsY0FBYyxDQUFDLE1BQXdDO0lBQzVELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQ3hCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQ2hDLE1BQU0sQ0FDVCxDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV4QyxPQUFPO1FBQ0gsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRO0tBQ1gsQ0FBQTtJQUVELFNBQVMsUUFBUSxDQUFDLE1BQWM7UUFDNUIsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBR3BELEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNwQjtJQUdMLENBQUM7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvZHkgZnJvbSAnLi4vcGh5c2ljcy9Cb2R5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNyZWF0ZVJlbmRlcmVyLFxufTtcblxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIoY29uZmlnOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfSkge1xuICAgIGNvbnN0IGNhbnZhcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLFxuICAgICAgICBjb25maWdcbiAgICApO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHZpZXc6IGNhbnZhcyxcbiAgICAgICAgbmV4dFRpY2ssXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV4dFRpY2soYm9kaWVzOiBCb2R5W10pIHtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZic7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuXG4gICAgICAgIGZvciAoY29uc3QgYm9keSBvZiBib2RpZXMpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyhib2R5LngsIGJvZHkueSwgYm9keS5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzk5OSc7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG5cblxuICAgIH1cblxufVxuIl19

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Extract pixi to a plugin (SOC)
// PIXI
// const renderObjectContainer = new PIXI.Container();
// app.stage.addChild(renderObjectContainer);
// PIXI
// TODO: Stage, container
// https://github.com/Coder2012/pixi/tree/master/spaceshooter
// https://codepen.io/celsowhite/pen/XWbEzpx
exports.default = createGame;
function createGame(config) {
    const { targetGameLogicFrameRate, update, render, } = config;
    const MS_PER_UPDATE = 1000 / targetGameLogicFrameRate;
    return {
        start,
    };
    function start() {
        let previousTime = Date.now();
        let timeBehindRealWorld = 0;
        nextTick();
        function nextTick() {
            window.requestAnimationFrame(nextTick);
            const currentTime = Date.now();
            const elapsedTime = currentTime - previousTime;
            timeBehindRealWorld += elapsedTime;
            // TODO: process input
            // Fixed Game Logic timestep - TODO: bail after num iterations
            while (timeBehindRealWorld >= MS_PER_UPDATE) {
                update();
                timeBehindRealWorld -= MS_PER_UPDATE;
            }
            const distanceBetweenGameLogicFrames = timeBehindRealWorld / MS_PER_UPDATE;
            // Variable render timestep
            render(distanceBetweenGameLogicFrames);
            previousTime = currentTime;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSx1Q0FBdUM7QUFFdkMsT0FBTztBQUNQLHNEQUFzRDtBQUN0RCw2Q0FBNkM7QUFDN0MsT0FBTztBQUVQLHlCQUF5QjtBQUN6Qiw2REFBNkQ7QUFDN0QsNENBQTRDO0FBRTVDLGtCQUFlLFVBQVUsQ0FBQztBQUUxQixTQUFTLFVBQVUsQ0FBQyxNQUFrQjtJQUVsQyxNQUFNLEVBQ0Ysd0JBQXdCLEVBQ3hCLE1BQU0sRUFDTixNQUFNLEdBQ1QsR0FBRyxNQUFNLENBQUM7SUFFWCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFHdEQsT0FBTztRQUNILEtBQUs7S0FDUixDQUFDO0lBRUYsU0FBUyxLQUFLO1FBQ1YsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBRTVCLFFBQVEsRUFBRSxDQUFDO1FBRVgsU0FBUyxRQUFRO1lBQ2IsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXZDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMvQixNQUFNLFdBQVcsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO1lBQy9DLG1CQUFtQixJQUFJLFdBQVcsQ0FBQztZQUVuQyxzQkFBc0I7WUFFdEIsOERBQThEO1lBQzlELE9BQU8sbUJBQW1CLElBQUksYUFBYSxFQUFFO2dCQUN6QyxNQUFNLEVBQUUsQ0FBQztnQkFDVCxtQkFBbUIsSUFBSSxhQUFhLENBQUM7YUFDeEM7WUFFRCxNQUFNLDhCQUE4QixHQUFHLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztZQUUzRSwyQkFBMkI7WUFDM0IsTUFBTSxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDdkMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUMvQixDQUFDO0lBQ0wsQ0FBQztBQUVMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgR2FtZUNvbmZpZyB7XG4gICAgdGFyZ2V0R2FtZUxvZ2ljRnJhbWVSYXRlOiBudW1iZXI7XG4gICAgdXBkYXRlOiAoKSA9PiBhbnk7XG4gICAgcmVuZGVyOiAoZGlzdGFuY2VCZXR3ZWVuR2FtZUxvZ2ljRnJhbWVzOiBudW1iZXIpID0+IGFueTtcbn1cblxuLy8gVE9ETzogRXh0cmFjdCBwaXhpIHRvIGEgcGx1Z2luIChTT0MpXG5cbi8vIFBJWElcbi8vIGNvbnN0IHJlbmRlck9iamVjdENvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuLy8gYXBwLnN0YWdlLmFkZENoaWxkKHJlbmRlck9iamVjdENvbnRhaW5lcik7XG4vLyBQSVhJXG5cbi8vIFRPRE86IFN0YWdlLCBjb250YWluZXJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Db2RlcjIwMTIvcGl4aS90cmVlL21hc3Rlci9zcGFjZXNob290ZXJcbi8vIGh0dHBzOi8vY29kZXBlbi5pby9jZWxzb3doaXRlL3Blbi9YV2JFenB4XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUdhbWU7XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWUoY29uZmlnOiBHYW1lQ29uZmlnKSB7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZSxcbiAgICAgICAgdXBkYXRlLFxuICAgICAgICByZW5kZXIsXG4gICAgfSA9IGNvbmZpZztcblxuICAgIGNvbnN0IE1TX1BFUl9VUERBVEUgPSAxMDAwIC8gdGFyZ2V0R2FtZUxvZ2ljRnJhbWVSYXRlO1xuXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGxldCBwcmV2aW91c1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgdGltZUJlaGluZFJlYWxXb3JsZCA9IDA7XG5cbiAgICAgICAgbmV4dFRpY2soKTtcblxuICAgICAgICBmdW5jdGlvbiBuZXh0VGljaygpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmV4dFRpY2spO1xuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkVGltZSA9IGN1cnJlbnRUaW1lIC0gcHJldmlvdXNUaW1lO1xuICAgICAgICAgICAgdGltZUJlaGluZFJlYWxXb3JsZCArPSBlbGFwc2VkVGltZTtcblxuICAgICAgICAgICAgLy8gVE9ETzogcHJvY2VzcyBpbnB1dFxuXG4gICAgICAgICAgICAvLyBGaXhlZCBHYW1lIExvZ2ljIHRpbWVzdGVwIC0gVE9ETzogYmFpbCBhZnRlciBudW0gaXRlcmF0aW9uc1xuICAgICAgICAgICAgd2hpbGUgKHRpbWVCZWhpbmRSZWFsV29ybGQgPj0gTVNfUEVSX1VQREFURSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRpbWVCZWhpbmRSZWFsV29ybGQgLT0gTVNfUEVSX1VQREFURTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuR2FtZUxvZ2ljRnJhbWVzID0gdGltZUJlaGluZFJlYWxXb3JsZCAvIE1TX1BFUl9VUERBVEU7XG5cbiAgICAgICAgICAgIC8vIFZhcmlhYmxlIHJlbmRlciB0aW1lc3RlcFxuICAgICAgICAgICAgcmVuZGVyKGRpc3RhbmNlQmV0d2VlbkdhbWVMb2dpY0ZyYW1lcyk7XG4gICAgICAgICAgICBwcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
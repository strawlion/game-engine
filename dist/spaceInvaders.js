/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./examples/space-invaders/spaceInvaders.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./examples/space-invaders/spaceInvaders.ts":
/*!**************************************************!*\
  !*** ./examples/space-invaders/spaceInvaders.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(__webpack_require__(/*! ../../src/index */ "./src/index.ts"));
const physics_1 = __importDefault(__webpack_require__(/*! ../../physics */ "./physics/index.ts"));
const render_1 = __importDefault(__webpack_require__(/*! ../../render */ "./render/index.ts"));
const { createGame } = index_1.default;
const gameConfig = {
    width: 800,
    height: 600,
};
// Add renderer
const renderer = render_1.default.createRenderer(gameConfig);
document.body.appendChild(renderer.view);
const inputManager = getInputManager(renderer.view);
const game = createGame({
    targetGameLogicFrameRate: 60,
    onStart,
    update,
    render,
});
// TODO:
// - Make it easy to create game objects
// - Input management
// - Collision handling
// - Make it easy to use percentages rather than absolute positioning
// https://www.joshmorony.com/how-to-scale-a-game-for-all-device-sizes-in-phaser/
// Create invaders
const invaders = [];
for (let i = 0; i < 5; i++) {
    invaders.push(physics_1.default.Bodies.circle({
        x: (gameConfig.width * 0.2 * (i + .5)),
        y: gameConfig.height * 0.10,
        radius: 15,
    }));
}
// Create Player
const player = physics_1.default.Bodies.circle({ x: 400, y: 200, radius: 25 });
const world = [
    ...invaders,
    player,
];
game.start();
function onStart() {
    invaders.forEach(invader => {
        invader.velocity = { x: 1, y: 0 };
    });
    // Configure player keys
    const keys = ['w', 'a', 's', 'd'];
    for (const key of keys) {
        inputManager.onKeyDown(key, updatePlayerVelocity)
            .onKeyUp(key, updatePlayerVelocity);
    }
}
// function processInput() {
// }
function updatePlayerVelocity() {
    const velocity = { x: 0, y: 0 };
    inputManager
        .ifKeyDown('w', () => velocity.y -= 1)
        .ifKeyDown('a', () => velocity.x -= 1)
        .ifKeyDown('s', () => velocity.y += 1)
        .ifKeyDown('d', () => velocity.x += 1);
    player.velocity = velocity;
}
function update() {
    const firstInvader = invaders[0];
    const lastInvader = invaders[invaders.length - 1];
    const isFirstInvaderOffLeftSide = (firstInvader.x - firstInvader.radius) <= 0;
    const isLastInvaderOffRightSide = (lastInvader.x + lastInvader.radius) >= gameConfig.width;
    if (isFirstInvaderOffLeftSide || isLastInvaderOffRightSide) {
        invaders.forEach(invader => invader.velocity.x *= -1);
        invaders.forEach(invader => invader.y += gameConfig.height * .01);
    }
    physics_1.default.nextTick(world);
}
function render(distanceBetweenGameLogicFrames) {
    renderer.nextTick(world);
}
// TODO: Process events off update loop, use velocity instead of modifying x/y
// TODO: Abstract out
// TODO: Foreign key layouts?
// NOTE: Case sensitive at the moment
function getInputManager(element) {
    const keyToIsDown = {};
    const keyToKeyDownHandlers = {};
    const keyToKeyUpHandlers = {};
    // TODO: Should we set this on the input element instead?
    element.ownerDocument.addEventListener('keydown', event => {
        keyToIsDown[event.key.toLowerCase()] = true;
        const eventHandlers = keyToKeyDownHandlers[event.key.toLowerCase()] || [];
        eventHandlers.forEach(handler => handler());
    });
    element.ownerDocument.addEventListener('keyup', event => {
        keyToIsDown[event.key.toLowerCase()] = false;
        const eventHandlers = keyToKeyDownHandlers[event.key.toLowerCase()] || [];
        eventHandlers.forEach(handler => handler());
    });
    const inputManager = {
        isKeyDown,
        ifKeyDown,
        onKeyDown,
        onKeyUp,
    };
    return inputManager;
    function isKeyDown(key) {
        return keyToIsDown[key];
    }
    // TODO: allow mapping multiple keys to same event
    // TODO: Naming, Down or press?
    function ifKeyDown(key, fn) {
        if (isKeyDown(key)) {
            fn();
        }
        return inputManager;
    }
    function onKeyDown(key, fn) {
        const eventHandlers = keyToKeyDownHandlers[key] = keyToKeyDownHandlers[key] || [];
        eventHandlers.push(fn);
        return inputManager;
    }
    function onKeyUp(key, fn) {
        const eventHandlers = keyToKeyUpHandlers[key] = keyToKeyUpHandlers[key] || [];
        eventHandlers.push(fn);
        return inputManager;
    }
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./physics/Bodies.ts":
/*!***************************!*\
  !*** ./physics/Bodies.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    circle,
};
/**
* Creates a new rigid body model with a circle hull.
* The options parameter is an object that specifies any properties you wish to override the defaults.
* See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
* @method circle
* @param {number} x
* @param {number} y
* @param {number} radius
* @return {body} A new circle body
*/
function circle(config) {
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9kaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vcGh5c2ljcy9Cb2RpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQkFBZTtJQUNYLE1BQU07Q0FDVCxDQUFDO0FBRUQ7Ozs7Ozs7OztFQVNFO0FBQ0gsU0FBUyxNQUFNLENBQUMsTUFJWDtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQm9keSBmcm9tICcuL0JvZHknO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY2lyY2xlLFxufTtcblxuIC8qKlxuICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSBjaXJjbGUgaHVsbC5cbiAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gKiBAbWV0aG9kIGNpcmNsZVxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gKiBAcmV0dXJuIHtib2R5fSBBIG5ldyBjaXJjbGUgYm9keVxuICovXG5mdW5jdGlvbiBjaXJjbGUoY29uZmlnOiB7XG4gICAgICAgIHg6IG51bWJlcjtcbiAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICByYWRpdXM6IG51bWJlcjtcbiAgICB9KTogQm9keSB7XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbiJdfQ==

/***/ }),

/***/ "./physics/index.ts":
/*!**************************!*\
  !*** ./physics/index.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bodies_1 = __importDefault(__webpack_require__(/*! ./Bodies */ "./physics/Bodies.ts"));
exports.default = {
    Bodies: Bodies_1.default,
    nextTick,
};
function nextTick(bodies) {
    for (const body of bodies) {
        // Update position
        const velocity = {
            x: 0,
            y: 0,
            ...body.velocity,
        };
        body.x += velocity.x;
        body.y += velocity.y;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9waHlzaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQThCO0FBRzlCLGtCQUFlO0lBQ1gsTUFBTSxFQUFOLGdCQUFNO0lBQ04sUUFBUTtDQUNYLENBQUM7QUFHRixTQUFTLFFBQVEsQ0FBQyxNQUFjO0lBQzVCLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1FBQ3ZCLGtCQUFrQjtRQUNsQixNQUFNLFFBQVEsR0FBRztZQUNiLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixHQUFHLElBQUksQ0FBQyxRQUFRO1NBQ25CLENBQUE7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb2RpZXMgZnJvbSAnLi9Cb2RpZXMnO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9Cb2R5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEJvZGllcyxcbiAgICBuZXh0VGljayxcbn07XG5cblxuZnVuY3Rpb24gbmV4dFRpY2soYm9kaWVzOiBCb2R5W10pIHtcbiAgICBmb3IgKGNvbnN0IGJvZHkgb2YgYm9kaWVzKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBwb3NpdGlvblxuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgLi4uYm9keS52ZWxvY2l0eSxcbiAgICAgICAgfVxuICAgICAgICBib2R5LnggKz0gdmVsb2NpdHkueDtcbiAgICAgICAgYm9keS55ICs9IHZlbG9jaXR5Lnk7XG4gICAgfVxufVxuIl19

/***/ }),

/***/ "./render/index.ts":
/*!*************************!*\
  !*** ./render/index.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    createRenderer,
};
function createRenderer(config) {
    const canvas = Object.assign(document.createElement('canvas'), config);
    const context = canvas.getContext('2d');
    return {
        view: canvas,
        nextTick,
    };
    function nextTick(bodies) {
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        for (const body of bodies) {
            context.beginPath();
            context.arc(body.x, body.y, body.radius, 0, 2 * Math.PI);
            context.lineWidth = 1;
            context.strokeStyle = '#999';
            context.stroke();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9yZW5kZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQkFBZTtJQUNYLGNBQWM7Q0FDakIsQ0FBQztBQUVGLFNBQVMsY0FBYyxDQUFDLE1BQXdDO0lBQzVELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQ3hCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQ2hDLE1BQU0sQ0FDVCxDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV4QyxPQUFPO1FBQ0gsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRO0tBQ1gsQ0FBQTtJQUVELFNBQVMsUUFBUSxDQUFDLE1BQWM7UUFDNUIsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBR3BELEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNwQjtJQUdMLENBQUM7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvZHkgZnJvbSAnLi4vcGh5c2ljcy9Cb2R5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNyZWF0ZVJlbmRlcmVyLFxufTtcblxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIoY29uZmlnOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfSkge1xuICAgIGNvbnN0IGNhbnZhcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLFxuICAgICAgICBjb25maWdcbiAgICApO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHZpZXc6IGNhbnZhcyxcbiAgICAgICAgbmV4dFRpY2ssXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV4dFRpY2soYm9kaWVzOiBCb2R5W10pIHtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZic7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuXG4gICAgICAgIGZvciAoY29uc3QgYm9keSBvZiBib2RpZXMpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyhib2R5LngsIGJvZHkueSwgYm9keS5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzk5OSc7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG5cblxuICAgIH1cblxufVxuIl19

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Extract pixi to a plugin (SOC)
// PIXI
// const renderObjectContainer = new PIXI.Container();
// app.stage.addChild(renderObjectContainer);
// PIXI
// TODO: Stage, container
// https://github.com/Coder2012/pixi/tree/master/spaceshooter
// https://codepen.io/celsowhite/pen/XWbEzpx
exports.default = {
    createGameObject,
    createGame,
};
function createGameObject() {
}
function createGame(config) {
    const { targetGameLogicFrameRate, onStart, update, render, } = config;
    const MS_PER_UPDATE = 1000 / targetGameLogicFrameRate;
    return {
        start,
    };
    function start() {
        let previousTime = Date.now();
        let timeBehindRealWorld = 0;
        onStart();
        nextTick();
        function nextTick() {
            window.requestAnimationFrame(nextTick);
            const currentTime = Date.now();
            const elapsedTime = currentTime - previousTime;
            timeBehindRealWorld += elapsedTime;
            // processInput();
            // Fixed Game Logic timestep - TODO: bail after num iterations
            while (timeBehindRealWorld >= MS_PER_UPDATE) {
                update();
                timeBehindRealWorld -= MS_PER_UPDATE;
            }
            const distanceBetweenGameLogicFrames = timeBehindRealWorld / MS_PER_UPDATE;
            // Variable render timestep
            render(distanceBetweenGameLogicFrames);
            previousTime = currentTime;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFVQSx1Q0FBdUM7QUFFdkMsT0FBTztBQUNQLHNEQUFzRDtBQUN0RCw2Q0FBNkM7QUFDN0MsT0FBTztBQUVQLHlCQUF5QjtBQUN6Qiw2REFBNkQ7QUFDN0QsNENBQTRDO0FBRTVDLGtCQUFlO0lBQ1gsZ0JBQWdCO0lBQ2hCLFVBQVU7Q0FDYixDQUFDO0FBTUYsU0FBUyxnQkFBZ0I7QUFFekIsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLE1BQWtCO0lBRWxDLE1BQU0sRUFDRix3QkFBd0IsRUFDeEIsT0FBTyxFQUNQLE1BQU0sRUFDTixNQUFNLEdBQ1QsR0FBRyxNQUFNLENBQUM7SUFFWCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFHdEQsT0FBTztRQUNILEtBQUs7S0FDUixDQUFDO0lBRUYsU0FBUyxLQUFLO1FBQ1YsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBRTVCLE9BQU8sRUFBRSxDQUFDO1FBQ1YsUUFBUSxFQUFFLENBQUM7UUFFWCxTQUFTLFFBQVE7WUFDYixNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFdkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9CLE1BQU0sV0FBVyxHQUFHLFdBQVcsR0FBRyxZQUFZLENBQUM7WUFDL0MsbUJBQW1CLElBQUksV0FBVyxDQUFDO1lBRW5DLGtCQUFrQjtZQUVsQiw4REFBOEQ7WUFDOUQsT0FBTyxtQkFBbUIsSUFBSSxhQUFhLEVBQUU7Z0JBQ3pDLE1BQU0sRUFBRSxDQUFDO2dCQUNULG1CQUFtQixJQUFJLGFBQWEsQ0FBQzthQUN4QztZQUVELE1BQU0sOEJBQThCLEdBQUcsbUJBQW1CLEdBQUcsYUFBYSxDQUFDO1lBRTNFLDJCQUEyQjtZQUMzQixNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztZQUN2QyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDO0FBRUwsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb2R5IGZyb20gXCIuLi9waHlzaWNzL0JvZHlcIjtcblxuaW50ZXJmYWNlIEdhbWVDb25maWcge1xuICAgIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZTogbnVtYmVyO1xuICAgIG9uU3RhcnQ6ICgpID0+IGFueTtcbiAgICAvLyBwcm9jZXNzSW5wdXQ6ICgpID0+IGFueTtcbiAgICB1cGRhdGU6ICgpID0+IGFueTtcbiAgICByZW5kZXI6IChkaXN0YW5jZUJldHdlZW5HYW1lTG9naWNGcmFtZXM6IG51bWJlcikgPT4gYW55O1xufVxuXG4vLyBUT0RPOiBFeHRyYWN0IHBpeGkgdG8gYSBwbHVnaW4gKFNPQylcblxuLy8gUElYSVxuLy8gY29uc3QgcmVuZGVyT2JqZWN0Q29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4vLyBhcHAuc3RhZ2UuYWRkQ2hpbGQocmVuZGVyT2JqZWN0Q29udGFpbmVyKTtcbi8vIFBJWElcblxuLy8gVE9ETzogU3RhZ2UsIGNvbnRhaW5lclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0NvZGVyMjAxMi9waXhpL3RyZWUvbWFzdGVyL3NwYWNlc2hvb3RlclxuLy8gaHR0cHM6Ly9jb2RlcGVuLmlvL2NlbHNvd2hpdGUvcGVuL1hXYkV6cHhcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNyZWF0ZUdhbWVPYmplY3QsXG4gICAgY3JlYXRlR2FtZSxcbn07XG5cbmludGVyZmFjZSBHYW1lT2JqZWN0Q29uZmlnIHtcbiAgICBib2R5OiBCb2R5LFxufVxuXG5mdW5jdGlvbiBjcmVhdGVHYW1lT2JqZWN0KCkge1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWUoY29uZmlnOiBHYW1lQ29uZmlnKSB7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZSxcbiAgICAgICAgb25TdGFydCxcbiAgICAgICAgdXBkYXRlLFxuICAgICAgICByZW5kZXIsXG4gICAgfSA9IGNvbmZpZztcblxuICAgIGNvbnN0IE1TX1BFUl9VUERBVEUgPSAxMDAwIC8gdGFyZ2V0R2FtZUxvZ2ljRnJhbWVSYXRlO1xuXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGxldCBwcmV2aW91c1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgdGltZUJlaGluZFJlYWxXb3JsZCA9IDA7XG5cbiAgICAgICAgb25TdGFydCgpO1xuICAgICAgICBuZXh0VGljaygpO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5leHRUaWNrKCkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShuZXh0VGljayk7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gY3VycmVudFRpbWUgLSBwcmV2aW91c1RpbWU7XG4gICAgICAgICAgICB0aW1lQmVoaW5kUmVhbFdvcmxkICs9IGVsYXBzZWRUaW1lO1xuXG4gICAgICAgICAgICAvLyBwcm9jZXNzSW5wdXQoKTtcblxuICAgICAgICAgICAgLy8gRml4ZWQgR2FtZSBMb2dpYyB0aW1lc3RlcCAtIFRPRE86IGJhaWwgYWZ0ZXIgbnVtIGl0ZXJhdGlvbnNcbiAgICAgICAgICAgIHdoaWxlICh0aW1lQmVoaW5kUmVhbFdvcmxkID49IE1TX1BFUl9VUERBVEUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB0aW1lQmVoaW5kUmVhbFdvcmxkIC09IE1TX1BFUl9VUERBVEU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlbkdhbWVMb2dpY0ZyYW1lcyA9IHRpbWVCZWhpbmRSZWFsV29ybGQgLyBNU19QRVJfVVBEQVRFO1xuXG4gICAgICAgICAgICAvLyBWYXJpYWJsZSByZW5kZXIgdGltZXN0ZXBcbiAgICAgICAgICAgIHJlbmRlcihkaXN0YW5jZUJldHdlZW5HYW1lTG9naWNGcmFtZXMpO1xuICAgICAgICAgICAgcHJldmlvdXNUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
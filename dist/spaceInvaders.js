/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./examples/space-invaders/spaceInvaders.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./examples/space-invaders/spaceInvaders.ts":
/*!**************************************************!*\
  !*** ./examples/space-invaders/spaceInvaders.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(__webpack_require__(/*! ../../src/index */ "./src/index.ts"));
const physics_1 = __importDefault(__webpack_require__(/*! ../../physics */ "./physics/index.ts"));
const render_1 = __importDefault(__webpack_require__(/*! ../../render */ "./render/index.ts"));
const gameConfig = {
    width: 800,
    height: 600,
};
// Add renderer
const renderer = render_1.default.createRenderer(gameConfig);
document.body.appendChild(renderer.view);
const game = index_1.default({
    targetGameLogicFrameRate: 60,
    onStart,
    update,
    render,
});
// Create invaders
const invaders = [];
for (let i = 0; i < 5; i++) {
    invaders.push(physics_1.default.Bodies.circle({
        x: (gameConfig.width * 0.2 * (i + .5)),
        y: gameConfig.height * 0.10,
        radius: 15,
    }));
}
// Create Player
const player = physics_1.default.Bodies.circle({ x: 400, y: 200, radius: 25 });
const world = [
    ...invaders,
    player,
];
game.start();
function onStart() {
    invaders.forEach(invader => {
        invader.velocity = { x: 1, y: 0 };
    });
}
function update() {
    const firstInvader = invaders[0];
    const lastInvader = invaders[invaders.length - 1];
    const isFirstInvaderOffLeftSide = (firstInvader.x - firstInvader.radius) <= 0;
    const isLastInvaderOffRightSide = (lastInvader.x + lastInvader.radius) >= gameConfig.width;
    if (isFirstInvaderOffLeftSide || isLastInvaderOffRightSide) {
        invaders.forEach(invader => invader.velocity.x *= -1);
        invaders.forEach(invader => invader.y += gameConfig.height * .01);
    }
    physics_1.default.nextTick(world);
}
function render(distanceBetweenGameLogicFrames) {
    renderer.nextTick(world);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhY2VJbnZhZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2V4YW1wbGVzL3NwYWNlLWludmFkZXJzL3NwYWNlSW52YWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0REFBeUM7QUFDekMsNERBQW9DO0FBQ3BDLDBEQUFvQztBQUVwQyxNQUFNLFVBQVUsR0FBRztJQUNmLEtBQUssRUFBRSxHQUFHO0lBQ1YsTUFBTSxFQUFFLEdBQUc7Q0FDZCxDQUFDO0FBRUYsZUFBZTtBQUNmLE1BQU0sUUFBUSxHQUFHLGdCQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QyxNQUFNLElBQUksR0FBRyxlQUFVLENBQUM7SUFDcEIsd0JBQXdCLEVBQUUsRUFBRTtJQUM1QixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07Q0FDVCxDQUFDLENBQUM7QUFJSCxrQkFBa0I7QUFDbEIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDeEIsUUFBUSxDQUFDLElBQUksQ0FDVCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEIsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSTtRQUMzQixNQUFNLEVBQUUsRUFBRTtLQUNiLENBQUMsQ0FDTCxDQUFBO0NBQ0o7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRXJFLE1BQU0sS0FBSyxHQUFHO0lBQ1YsR0FBRyxRQUFRO0lBQ1gsTUFBTTtDQUNULENBQUM7QUFFRixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFFYixTQUFTLE9BQU87SUFDWixRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFFRCxTQUFTLE1BQU07SUFFWCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEQsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RSxNQUFNLHlCQUF5QixHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQztJQUMzRixJQUFJLHlCQUF5QixJQUFJLHlCQUF5QixFQUFFO1FBQ3hELFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7S0FDckU7SUFFRCxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsOEJBQXNDO0lBQ2xELFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVHYW1lIGZyb20gJy4uLy4uL3NyYy9pbmRleCc7XG5pbXBvcnQgUGh5c2ljcyBmcm9tICcuLi8uLi9waHlzaWNzJztcbmltcG9ydCBSZW5kZXJlciBmcm9tICcuLi8uLi9yZW5kZXInO1xuXG5jb25zdCBnYW1lQ29uZmlnID0ge1xuICAgIHdpZHRoOiA4MDAsXG4gICAgaGVpZ2h0OiA2MDAsXG59O1xuXG4vLyBBZGQgcmVuZGVyZXJcbmNvbnN0IHJlbmRlcmVyID0gUmVuZGVyZXIuY3JlYXRlUmVuZGVyZXIoZ2FtZUNvbmZpZyk7XG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLnZpZXcpO1xuXG5jb25zdCBnYW1lID0gY3JlYXRlR2FtZSh7XG4gICAgdGFyZ2V0R2FtZUxvZ2ljRnJhbWVSYXRlOiA2MCxcbiAgICBvblN0YXJ0LFxuICAgIHVwZGF0ZSxcbiAgICByZW5kZXIsXG59KTtcblxuXG5cbi8vIENyZWF0ZSBpbnZhZGVyc1xuY29uc3QgaW52YWRlcnMgPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgaW52YWRlcnMucHVzaChcbiAgICAgICAgUGh5c2ljcy5Cb2RpZXMuY2lyY2xlKHtcbiAgICAgICAgICAgIHg6IChnYW1lQ29uZmlnLndpZHRoICogMC4yICogKGkgKyAuNSkpLFxuICAgICAgICAgICAgeTogZ2FtZUNvbmZpZy5oZWlnaHQgKiAwLjEwLFxuICAgICAgICAgICAgcmFkaXVzOiAxNSxcbiAgICAgICAgfSlcbiAgICApXG59XG5cbi8vIENyZWF0ZSBQbGF5ZXJcbmNvbnN0IHBsYXllciA9IFBoeXNpY3MuQm9kaWVzLmNpcmNsZSh7IHg6IDQwMCwgeTogMjAwLCByYWRpdXM6IDI1IH0pO1xuXG5jb25zdCB3b3JsZCA9IFtcbiAgICAuLi5pbnZhZGVycyxcbiAgICBwbGF5ZXIsXG5dO1xuXG5nYW1lLnN0YXJ0KCk7XG5cbmZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgaW52YWRlcnMuZm9yRWFjaChpbnZhZGVyID0+IHtcbiAgICAgICAgaW52YWRlci52ZWxvY2l0eSA9IHsgeDogMSwgeTogMCB9O1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuICAgIGNvbnN0IGZpcnN0SW52YWRlciA9IGludmFkZXJzWzBdO1xuICAgIGNvbnN0IGxhc3RJbnZhZGVyID0gaW52YWRlcnNbaW52YWRlcnMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgaXNGaXJzdEludmFkZXJPZmZMZWZ0U2lkZSA9IChmaXJzdEludmFkZXIueCAtIGZpcnN0SW52YWRlci5yYWRpdXMpIDw9IDA7XG4gICAgY29uc3QgaXNMYXN0SW52YWRlck9mZlJpZ2h0U2lkZSA9IChsYXN0SW52YWRlci54ICsgbGFzdEludmFkZXIucmFkaXVzKSA+PSBnYW1lQ29uZmlnLndpZHRoO1xuICAgIGlmIChpc0ZpcnN0SW52YWRlck9mZkxlZnRTaWRlIHx8IGlzTGFzdEludmFkZXJPZmZSaWdodFNpZGUpIHtcbiAgICAgICAgaW52YWRlcnMuZm9yRWFjaChpbnZhZGVyID0+IGludmFkZXIudmVsb2NpdHkueCAqPSAtMSk7XG4gICAgICAgIGludmFkZXJzLmZvckVhY2goaW52YWRlciA9PiBpbnZhZGVyLnkgKz0gZ2FtZUNvbmZpZy5oZWlnaHQgKiAuMDEpO1xuICAgIH1cblxuICAgIFBoeXNpY3MubmV4dFRpY2sod29ybGQpO1xufVxuXG5mdW5jdGlvbiByZW5kZXIoZGlzdGFuY2VCZXR3ZWVuR2FtZUxvZ2ljRnJhbWVzOiBudW1iZXIpIHtcbiAgICByZW5kZXJlci5uZXh0VGljayh3b3JsZCk7XG59XG4iXX0=

/***/ }),

/***/ "./physics/Bodies.ts":
/*!***************************!*\
  !*** ./physics/Bodies.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    circle,
};
/**
* Creates a new rigid body model with a circle hull.
* The options parameter is an object that specifies any properties you wish to override the defaults.
* See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
* @method circle
* @param {number} x
* @param {number} y
* @param {number} radius
* @return {body} A new circle body
*/
function circle(config) {
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9kaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vcGh5c2ljcy9Cb2RpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQkFBZTtJQUNYLE1BQU07Q0FDVCxDQUFDO0FBRUQ7Ozs7Ozs7OztFQVNFO0FBQ0gsU0FBUyxNQUFNLENBQUMsTUFJWDtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQm9keSBmcm9tICcuL0JvZHknO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY2lyY2xlLFxufTtcblxuIC8qKlxuICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSBjaXJjbGUgaHVsbC5cbiAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gKiBAbWV0aG9kIGNpcmNsZVxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gKiBAcmV0dXJuIHtib2R5fSBBIG5ldyBjaXJjbGUgYm9keVxuICovXG5mdW5jdGlvbiBjaXJjbGUoY29uZmlnOiB7XG4gICAgICAgIHg6IG51bWJlcjtcbiAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICByYWRpdXM6IG51bWJlcjtcbiAgICB9KTogQm9keSB7XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbiJdfQ==

/***/ }),

/***/ "./physics/index.ts":
/*!**************************!*\
  !*** ./physics/index.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bodies_1 = __importDefault(__webpack_require__(/*! ./Bodies */ "./physics/Bodies.ts"));
exports.default = {
    Bodies: Bodies_1.default,
    nextTick,
};
function nextTick(bodies) {
    for (const body of bodies) {
        // Update position
        const velocity = {
            x: 0,
            y: 0,
            ...body.velocity,
        };
        body.x += velocity.x;
        body.y += velocity.y;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9waHlzaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQThCO0FBRzlCLGtCQUFlO0lBQ1gsTUFBTSxFQUFOLGdCQUFNO0lBQ04sUUFBUTtDQUNYLENBQUM7QUFHRixTQUFTLFFBQVEsQ0FBQyxNQUFjO0lBQzVCLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1FBQ3ZCLGtCQUFrQjtRQUNsQixNQUFNLFFBQVEsR0FBRztZQUNiLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixHQUFHLElBQUksQ0FBQyxRQUFRO1NBQ25CLENBQUE7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb2RpZXMgZnJvbSAnLi9Cb2RpZXMnO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9Cb2R5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEJvZGllcyxcbiAgICBuZXh0VGljayxcbn07XG5cblxuZnVuY3Rpb24gbmV4dFRpY2soYm9kaWVzOiBCb2R5W10pIHtcbiAgICBmb3IgKGNvbnN0IGJvZHkgb2YgYm9kaWVzKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBwb3NpdGlvblxuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgLi4uYm9keS52ZWxvY2l0eSxcbiAgICAgICAgfVxuICAgICAgICBib2R5LnggKz0gdmVsb2NpdHkueDtcbiAgICAgICAgYm9keS55ICs9IHZlbG9jaXR5Lnk7XG4gICAgfVxufVxuIl19

/***/ }),

/***/ "./render/index.ts":
/*!*************************!*\
  !*** ./render/index.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    createRenderer,
};
function createRenderer(config) {
    const canvas = Object.assign(document.createElement('canvas'), config);
    const context = canvas.getContext('2d');
    return {
        view: canvas,
        nextTick,
    };
    function nextTick(bodies) {
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        for (const body of bodies) {
            context.beginPath();
            context.arc(body.x, body.y, body.radius, 0, 2 * Math.PI);
            context.lineWidth = 1;
            context.strokeStyle = '#999';
            context.stroke();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9yZW5kZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQkFBZTtJQUNYLGNBQWM7Q0FDakIsQ0FBQztBQUVGLFNBQVMsY0FBYyxDQUFDLE1BQXdDO0lBQzVELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQ3hCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQ2hDLE1BQU0sQ0FDVCxDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV4QyxPQUFPO1FBQ0gsSUFBSSxFQUFFLE1BQU07UUFDWixRQUFRO0tBQ1gsQ0FBQTtJQUVELFNBQVMsUUFBUSxDQUFDLE1BQWM7UUFDNUIsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBR3BELEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNwQjtJQUdMLENBQUM7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvZHkgZnJvbSAnLi4vcGh5c2ljcy9Cb2R5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNyZWF0ZVJlbmRlcmVyLFxufTtcblxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIoY29uZmlnOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfSkge1xuICAgIGNvbnN0IGNhbnZhcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLFxuICAgICAgICBjb25maWdcbiAgICApO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHZpZXc6IGNhbnZhcyxcbiAgICAgICAgbmV4dFRpY2ssXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV4dFRpY2soYm9kaWVzOiBCb2R5W10pIHtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZic7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuXG4gICAgICAgIGZvciAoY29uc3QgYm9keSBvZiBib2RpZXMpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyhib2R5LngsIGJvZHkueSwgYm9keS5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzk5OSc7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG5cblxuICAgIH1cblxufVxuIl19

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Extract pixi to a plugin (SOC)
// PIXI
// const renderObjectContainer = new PIXI.Container();
// app.stage.addChild(renderObjectContainer);
// PIXI
// TODO: Stage, container
// https://github.com/Coder2012/pixi/tree/master/spaceshooter
// https://codepen.io/celsowhite/pen/XWbEzpx
exports.default = createGame;
function createGame(config) {
    const { targetGameLogicFrameRate, onStart, update, render, } = config;
    const MS_PER_UPDATE = 1000 / targetGameLogicFrameRate;
    return {
        start,
    };
    function start() {
        let previousTime = Date.now();
        let timeBehindRealWorld = 0;
        onStart();
        nextTick();
        function nextTick() {
            window.requestAnimationFrame(nextTick);
            const currentTime = Date.now();
            const elapsedTime = currentTime - previousTime;
            timeBehindRealWorld += elapsedTime;
            // TODO: process input
            // Fixed Game Logic timestep - TODO: bail after num iterations
            while (timeBehindRealWorld >= MS_PER_UPDATE) {
                update();
                timeBehindRealWorld -= MS_PER_UPDATE;
            }
            const distanceBetweenGameLogicFrames = timeBehindRealWorld / MS_PER_UPDATE;
            // Variable render timestep
            render(distanceBetweenGameLogicFrames);
            previousTime = currentTime;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSx1Q0FBdUM7QUFFdkMsT0FBTztBQUNQLHNEQUFzRDtBQUN0RCw2Q0FBNkM7QUFDN0MsT0FBTztBQUVQLHlCQUF5QjtBQUN6Qiw2REFBNkQ7QUFDN0QsNENBQTRDO0FBRTVDLGtCQUFlLFVBQVUsQ0FBQztBQUUxQixTQUFTLFVBQVUsQ0FBQyxNQUFrQjtJQUVsQyxNQUFNLEVBQ0Ysd0JBQXdCLEVBQ3hCLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxHQUNULEdBQUcsTUFBTSxDQUFDO0lBRVgsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLHdCQUF3QixDQUFDO0lBR3RELE9BQU87UUFDSCxLQUFLO0tBQ1IsQ0FBQztJQUVGLFNBQVMsS0FBSztRQUNWLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM5QixJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUU1QixPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxDQUFDO1FBRVgsU0FBUyxRQUFRO1lBQ2IsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXZDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMvQixNQUFNLFdBQVcsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO1lBQy9DLG1CQUFtQixJQUFJLFdBQVcsQ0FBQztZQUVuQyxzQkFBc0I7WUFFdEIsOERBQThEO1lBQzlELE9BQU8sbUJBQW1CLElBQUksYUFBYSxFQUFFO2dCQUN6QyxNQUFNLEVBQUUsQ0FBQztnQkFDVCxtQkFBbUIsSUFBSSxhQUFhLENBQUM7YUFDeEM7WUFFRCxNQUFNLDhCQUE4QixHQUFHLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztZQUUzRSwyQkFBMkI7WUFDM0IsTUFBTSxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDdkMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUMvQixDQUFDO0lBQ0wsQ0FBQztBQUVMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgR2FtZUNvbmZpZyB7XG4gICAgdGFyZ2V0R2FtZUxvZ2ljRnJhbWVSYXRlOiBudW1iZXI7XG4gICAgb25TdGFydDogKCkgPT4gYW55O1xuICAgIHVwZGF0ZTogKCkgPT4gYW55O1xuICAgIHJlbmRlcjogKGRpc3RhbmNlQmV0d2VlbkdhbWVMb2dpY0ZyYW1lczogbnVtYmVyKSA9PiBhbnk7XG59XG5cbi8vIFRPRE86IEV4dHJhY3QgcGl4aSB0byBhIHBsdWdpbiAoU09DKVxuXG4vLyBQSVhJXG4vLyBjb25zdCByZW5kZXJPYmplY3RDb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcbi8vIGFwcC5zdGFnZS5hZGRDaGlsZChyZW5kZXJPYmplY3RDb250YWluZXIpO1xuLy8gUElYSVxuXG4vLyBUT0RPOiBTdGFnZSwgY29udGFpbmVyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vQ29kZXIyMDEyL3BpeGkvdHJlZS9tYXN0ZXIvc3BhY2VzaG9vdGVyXG4vLyBodHRwczovL2NvZGVwZW4uaW8vY2Vsc293aGl0ZS9wZW4vWFdiRXpweFxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVHYW1lO1xuXG5mdW5jdGlvbiBjcmVhdGVHYW1lKGNvbmZpZzogR2FtZUNvbmZpZykge1xuXG4gICAgY29uc3Qge1xuICAgICAgICB0YXJnZXRHYW1lTG9naWNGcmFtZVJhdGUsXG4gICAgICAgIG9uU3RhcnQsXG4gICAgICAgIHVwZGF0ZSxcbiAgICAgICAgcmVuZGVyLFxuICAgIH0gPSBjb25maWc7XG5cbiAgICBjb25zdCBNU19QRVJfVVBEQVRFID0gMTAwMCAvIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZTtcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBsZXQgcHJldmlvdXNUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IHRpbWVCZWhpbmRSZWFsV29ybGQgPSAwO1xuXG4gICAgICAgIG9uU3RhcnQoKTtcbiAgICAgICAgbmV4dFRpY2soKTtcblxuICAgICAgICBmdW5jdGlvbiBuZXh0VGljaygpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmV4dFRpY2spO1xuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkVGltZSA9IGN1cnJlbnRUaW1lIC0gcHJldmlvdXNUaW1lO1xuICAgICAgICAgICAgdGltZUJlaGluZFJlYWxXb3JsZCArPSBlbGFwc2VkVGltZTtcblxuICAgICAgICAgICAgLy8gVE9ETzogcHJvY2VzcyBpbnB1dFxuXG4gICAgICAgICAgICAvLyBGaXhlZCBHYW1lIExvZ2ljIHRpbWVzdGVwIC0gVE9ETzogYmFpbCBhZnRlciBudW0gaXRlcmF0aW9uc1xuICAgICAgICAgICAgd2hpbGUgKHRpbWVCZWhpbmRSZWFsV29ybGQgPj0gTVNfUEVSX1VQREFURSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRpbWVCZWhpbmRSZWFsV29ybGQgLT0gTVNfUEVSX1VQREFURTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuR2FtZUxvZ2ljRnJhbWVzID0gdGltZUJlaGluZFJlYWxXb3JsZCAvIE1TX1BFUl9VUERBVEU7XG5cbiAgICAgICAgICAgIC8vIFZhcmlhYmxlIHJlbmRlciB0aW1lc3RlcFxuICAgICAgICAgICAgcmVuZGVyKGRpc3RhbmNlQmV0d2VlbkdhbWVMb2dpY0ZyYW1lcyk7XG4gICAgICAgICAgICBwcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
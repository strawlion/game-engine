/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Extract pixi to a plugin (SOC)
// PIXI
// const renderObjectContainer = new PIXI.Container();
// app.stage.addChild(renderObjectContainer);
// PIXI
// TODO: Stage, container
// https://github.com/Coder2012/pixi/tree/master/spaceshooter
// https://codepen.io/celsowhite/pen/XWbEzpx
exports.default = {
    createGameObject,
    createGame,
};
function createGameObject() {
}
function createGame(config) {
    const { targetGameLogicFrameRate, onStart, update, render, } = config;
    const MS_PER_UPDATE = 1000 / targetGameLogicFrameRate;
    return {
        start,
    };
    function start() {
        let previousTime = Date.now();
        let timeBehindRealWorld = 0;
        onStart();
        nextTick();
        function nextTick() {
            window.requestAnimationFrame(nextTick);
            const currentTime = Date.now();
            const elapsedTime = currentTime - previousTime;
            timeBehindRealWorld += elapsedTime;
            // processInput();
            // Fixed Game Logic timestep - TODO: bail after num iterations
            while (timeBehindRealWorld >= MS_PER_UPDATE) {
                update();
                timeBehindRealWorld -= MS_PER_UPDATE;
            }
            const distanceBetweenGameLogicFrames = timeBehindRealWorld / MS_PER_UPDATE;
            // Variable render timestep
            render(distanceBetweenGameLogicFrames);
            previousTime = currentTime;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFVQSx1Q0FBdUM7QUFFdkMsT0FBTztBQUNQLHNEQUFzRDtBQUN0RCw2Q0FBNkM7QUFDN0MsT0FBTztBQUVQLHlCQUF5QjtBQUN6Qiw2REFBNkQ7QUFDN0QsNENBQTRDO0FBRTVDLGtCQUFlO0lBQ1gsZ0JBQWdCO0lBQ2hCLFVBQVU7Q0FDYixDQUFDO0FBTUYsU0FBUyxnQkFBZ0I7QUFFekIsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLE1BQWtCO0lBRWxDLE1BQU0sRUFDRix3QkFBd0IsRUFDeEIsT0FBTyxFQUNQLE1BQU0sRUFDTixNQUFNLEdBQ1QsR0FBRyxNQUFNLENBQUM7SUFFWCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFHdEQsT0FBTztRQUNILEtBQUs7S0FDUixDQUFDO0lBRUYsU0FBUyxLQUFLO1FBQ1YsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBRTVCLE9BQU8sRUFBRSxDQUFDO1FBQ1YsUUFBUSxFQUFFLENBQUM7UUFFWCxTQUFTLFFBQVE7WUFDYixNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFdkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQy9CLE1BQU0sV0FBVyxHQUFHLFdBQVcsR0FBRyxZQUFZLENBQUM7WUFDL0MsbUJBQW1CLElBQUksV0FBVyxDQUFDO1lBRW5DLGtCQUFrQjtZQUVsQiw4REFBOEQ7WUFDOUQsT0FBTyxtQkFBbUIsSUFBSSxhQUFhLEVBQUU7Z0JBQ3pDLE1BQU0sRUFBRSxDQUFDO2dCQUNULG1CQUFtQixJQUFJLGFBQWEsQ0FBQzthQUN4QztZQUVELE1BQU0sOEJBQThCLEdBQUcsbUJBQW1CLEdBQUcsYUFBYSxDQUFDO1lBRTNFLDJCQUEyQjtZQUMzQixNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztZQUN2QyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDO0FBRUwsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb2R5IGZyb20gXCIuLi9waHlzaWNzL0JvZHlcIjtcblxuaW50ZXJmYWNlIEdhbWVDb25maWcge1xuICAgIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZTogbnVtYmVyO1xuICAgIG9uU3RhcnQ6ICgpID0+IGFueTtcbiAgICAvLyBwcm9jZXNzSW5wdXQ6ICgpID0+IGFueTtcbiAgICB1cGRhdGU6ICgpID0+IGFueTtcbiAgICByZW5kZXI6IChkaXN0YW5jZUJldHdlZW5HYW1lTG9naWNGcmFtZXM6IG51bWJlcikgPT4gYW55O1xufVxuXG4vLyBUT0RPOiBFeHRyYWN0IHBpeGkgdG8gYSBwbHVnaW4gKFNPQylcblxuLy8gUElYSVxuLy8gY29uc3QgcmVuZGVyT2JqZWN0Q29udGFpbmVyID0gbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4vLyBhcHAuc3RhZ2UuYWRkQ2hpbGQocmVuZGVyT2JqZWN0Q29udGFpbmVyKTtcbi8vIFBJWElcblxuLy8gVE9ETzogU3RhZ2UsIGNvbnRhaW5lclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0NvZGVyMjAxMi9waXhpL3RyZWUvbWFzdGVyL3NwYWNlc2hvb3RlclxuLy8gaHR0cHM6Ly9jb2RlcGVuLmlvL2NlbHNvd2hpdGUvcGVuL1hXYkV6cHhcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNyZWF0ZUdhbWVPYmplY3QsXG4gICAgY3JlYXRlR2FtZSxcbn07XG5cbmludGVyZmFjZSBHYW1lT2JqZWN0Q29uZmlnIHtcbiAgICBib2R5OiBCb2R5LFxufVxuXG5mdW5jdGlvbiBjcmVhdGVHYW1lT2JqZWN0KCkge1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWUoY29uZmlnOiBHYW1lQ29uZmlnKSB7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHRhcmdldEdhbWVMb2dpY0ZyYW1lUmF0ZSxcbiAgICAgICAgb25TdGFydCxcbiAgICAgICAgdXBkYXRlLFxuICAgICAgICByZW5kZXIsXG4gICAgfSA9IGNvbmZpZztcblxuICAgIGNvbnN0IE1TX1BFUl9VUERBVEUgPSAxMDAwIC8gdGFyZ2V0R2FtZUxvZ2ljRnJhbWVSYXRlO1xuXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGxldCBwcmV2aW91c1RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgdGltZUJlaGluZFJlYWxXb3JsZCA9IDA7XG5cbiAgICAgICAgb25TdGFydCgpO1xuICAgICAgICBuZXh0VGljaygpO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5leHRUaWNrKCkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShuZXh0VGljayk7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gY3VycmVudFRpbWUgLSBwcmV2aW91c1RpbWU7XG4gICAgICAgICAgICB0aW1lQmVoaW5kUmVhbFdvcmxkICs9IGVsYXBzZWRUaW1lO1xuXG4gICAgICAgICAgICAvLyBwcm9jZXNzSW5wdXQoKTtcblxuICAgICAgICAgICAgLy8gRml4ZWQgR2FtZSBMb2dpYyB0aW1lc3RlcCAtIFRPRE86IGJhaWwgYWZ0ZXIgbnVtIGl0ZXJhdGlvbnNcbiAgICAgICAgICAgIHdoaWxlICh0aW1lQmVoaW5kUmVhbFdvcmxkID49IE1TX1BFUl9VUERBVEUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB0aW1lQmVoaW5kUmVhbFdvcmxkIC09IE1TX1BFUl9VUERBVEU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlbkdhbWVMb2dpY0ZyYW1lcyA9IHRpbWVCZWhpbmRSZWFsV29ybGQgLyBNU19QRVJfVVBEQVRFO1xuXG4gICAgICAgICAgICAvLyBWYXJpYWJsZSByZW5kZXIgdGltZXN0ZXBcbiAgICAgICAgICAgIHJlbmRlcihkaXN0YW5jZUJldHdlZW5HYW1lTG9naWNGcmFtZXMpO1xuICAgICAgICAgICAgcHJldmlvdXNUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,